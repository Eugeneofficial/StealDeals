# -*- coding: utf-8 -*-
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler
from config import TELEGRAM_TOKEN, GAME_GENRES
from database import get_session, User, Genre, Game
from parsers import SteamParser, EpicParser, GogParser
import asyncio
import schedule
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECTING_GENRES, SELECTING_NOTIFICATIONS = range(2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
steam_parser = SteamParser()
epic_parser = EpicParser()
gog_parser = GogParser()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    session = get_session()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    db_user = session.query(User).filter_by(telegram_id=user.id).first()
    if not db_user:
        db_user = User(
            telegram_id=user.id,
            username=user.username
        )
        session.add(db_user)
        session.commit()
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä—ã", callback_data='select_genres')],
        [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data='notification_settings')],
        [
            InlineKeyboardButton("üéÆ Steam", url="https://store.steampowered.com/about/"),
            InlineKeyboardButton("üéÆ Epic Games", url="https://store.epicgames.com/download"),
            InlineKeyboardButton("üéÆ GOG", url="https://www.gog.com/galaxy")
        ],
        [InlineKeyboardButton("üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", callback_data='support_dev')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–∏–¥–æ–∫ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä. –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:\n"
        "üéÆ Steam: https://store.steampowered.com/about/\n"
        "üéÆ Epic Games: https://store.epicgames.com/download\n"
        "üéÆ GOG Galaxy: https://www.gog.com/galaxy\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/deals - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–∫–∏–¥–∫–∏\n"
        "/free - –ü–æ–∫–∞–∑–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    if update.message:
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, disable_web_page_preview=True)
    else:
        await update.callback_query.edit_message_text(welcome_message, reply_markup=reply_markup, disable_web_page_preview=True)
    
    return SELECTING_GENRES

async def select_genres(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    session = get_session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    keyboard = []
    for genre_name in GAME_GENRES:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –∂–∞–Ω—Ä
        genre = session.query(Genre).filter_by(name=genre_name).first()
        if not genre:
            genre = Genre(name=genre_name)
            session.add(genre)
            session.commit()
        
        is_selected = genre in user.preferred_genres
        keyboard.append([
            InlineKeyboardButton(
                f"{'‚úÖ' if is_selected else '‚ùå'} {genre_name}",
                callback_data=f'toggle_genre_{genre.id}'
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='genres_done')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∂–∞–Ω—Ä—ã –∏–≥—Ä:",
        reply_markup=reply_markup
    )
    
    return SELECTING_GENRES

async def genres_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    session = get_session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    selected_genres = [genre.name for genre in user.preferred_genres]
    
    if not selected_genres:
        await query.edit_message_text(
            "‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∂–∞–Ω—Ä "
            "–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä—ã", callback_data='select_genres')
            ]])
        )
        return SELECTING_GENRES
    
    await query.edit_message_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∂–∞–Ω—Ä—ã:\n"
        f"üéØ {', '.join(selected_genres)}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö –≤ —ç—Ç–∏—Ö –∂–∞–Ω—Ä–∞—Ö.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')
        ]])
    )
    
    return SELECTING_GENRES

async def toggle_genre(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∂–∞–Ω—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    genre_id = int(query.data.split('_')[-1])
    session = get_session()
    
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    genre = session.query(Genre).filter_by(id=genre_id).first()
    
    if genre in user.preferred_genres:
        user.preferred_genres.remove(genre)
    else:
        user.preferred_genres.append(genre)
    
    session.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await select_genres(update, context)

async def notification_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    session = get_session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    keyboard = [
        [
            InlineKeyboardButton(
                "üîî –°–∫–∏–¥–∫–∏ " + ("‚úÖ" if user.notify_sales else "‚ùå"),
                callback_data='toggle_sales'
            )
        ],
        [
            InlineKeyboardButton(
                "üéÆ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã " + ("‚úÖ" if user.notify_free else "‚ùå"),
                callback_data='toggle_free'
            )
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=reply_markup
    )
    
    return SELECTING_NOTIFICATIONS

async def toggle_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    session = get_session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    if query.data == 'toggle_sales':
        user.notify_sales = not user.notify_sales
    elif query.data == 'toggle_free':
        user.notify_free = not user.notify_free
    
    session.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await notification_settings(update, context)

async def support_dev(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    support_message = (
        "üí∞ *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞*\n\n"
        "–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–µ, "
        "–≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å –ø–æ–º–æ—â—å—é –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω–µ–≥:\n\n"
        "`410019367949637`\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @EvgenyPivko\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè"
    )
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏", url="https://yoomoney.ru/to/410019367949637")],
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", url="https://t.me/EvgenyPivko")],
        [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        support_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return SELECTING_GENRES

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üéÆ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/deals - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–∫–∏–¥–∫–∏\n"
        "/free - –ü–æ–∫–∞–∑–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã\n\n"
        "üìù *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∂–∞–Ω—Ä—ã –∏–≥—Ä\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "3. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö\n\n"
        "‚ùì –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @EvgenyPivko\n\n"
        "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: `410019367949637` (–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏)"
    )
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", callback_data='support_dev')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(help_text, parse_mode='Markdown', reply_markup=reply_markup)
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(help_text, parse_mode='Markdown', reply_markup=reply_markup)

async def deals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deals"""
    session = get_session()
    user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
    
    status_message = await update.message.reply_text(
        "üîç –ü–æ–∏—Å–∫ —Å–∫–∏–¥–æ–∫...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        tasks = [
            steam_parser.get_deals(user.min_discount),
            epic_parser.get_deals(user.min_discount),
            gog_parser.get_deals(user.min_discount)
        ]
        results = await asyncio.gather(*tasks)
        
        all_deals = []
        for deals in results:
            all_deals.extend(deals)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∂–∞–Ω—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.preferred_genres:
            preferred_genre_names = [genre.name for genre in user.preferred_genres]
            all_deals = [
                deal for deal in all_deals 
                if any(genre in preferred_genre_names for genre in deal.genres)
            ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–∫–∏–¥–∫–∏
        all_deals.sort(key=lambda x: x.discount_percent, reverse=True)
        
        await status_message.delete()
        
        if not all_deals:
            await update.message.reply_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∫–∏–¥–æ–∫.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∂–∞–Ω—Ä–æ–≤ –∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 5 –∏–≥—Ä —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, deal in enumerate(all_deals[:5]):
            if i > 0:
                await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                
            message = (
                f"üéÆ *{deal.title}*\n"
                f"üí∞ –¶–µ–Ω–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ!' if deal.is_free else f'~~{deal.original_price}‚ÇΩ~~ *{deal.current_price}‚ÇΩ*'}\n"
                f"üìâ –°–∫–∏–¥–∫–∞: *{deal.discount_percent}%*\n"
                f"üè™ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: *{deal.platform.upper()}*\n"
                f"üéØ –ñ–∞–Ω—Ä—ã: {', '.join(deal.genres)}"
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
            store_url = deal.url
            if deal.platform.lower() == 'steam':
                store_url = f"https://store.steampowered.com/app/{deal.store_id}"
            elif deal.platform.lower() == 'epic':
                store_url = f"https://store.epicgames.com/p/{deal.store_id}"
            elif deal.platform.lower() == 'gog':
                store_url = f"https://www.gog.com/game/{deal.store_id}"
            
            keyboard = [
                [InlineKeyboardButton(
                    "üéÆ –û—Ç–∫—Ä—ã—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ" if deal.is_free else "üõí –ö—É–ø–∏—Ç—å",
                    url=store_url
                )],
                [InlineKeyboardButton(
                    "üì• –°–∫–∞—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç",
                    url=f"https://{'store.steampowered.com/about/' if deal.platform.lower() == 'steam' else 'store.epicgames.com/download' if deal.platform.lower() == 'epic' else 'www.gog.com/galaxy'}"
                )]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message, 
                parse_mode='Markdown', 
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            
    except Exception as e:
        logger.error(f"Error in deals_command: {e}")
        await status_message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∫–∏–¥–æ–∫.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def free_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /free"""
    status_message = await update.message.reply_text(
        "üîç –ü–æ–∏—Å–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        tasks = [
            steam_parser.get_free_games(),
            epic_parser.get_free_games(),
            gog_parser.get_free_games()
        ]
        results = await asyncio.gather(*tasks)
        
        all_games = []
        for games in results:
            all_games.extend(games)
        
        await status_message.delete()
        
        if not all_games:
            await update.message.reply_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, game in enumerate(all_games):
            if i > 0:
                await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                
            message = (
                f"üéÆ *{game.title}*\n"
                f"üè™ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: *{game.platform.upper()}*\n"
                f"üéØ –ñ–∞–Ω—Ä—ã: {', '.join(game.genres)}\n"
                f"üí∞ –°—Ç–∞—Ç—É—Å: *–ë–µ—Å–ø–ª–∞—Ç–Ω–æ!*"
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
            store_url = game.url
            if game.platform.lower() == 'steam':
                store_url = f"https://store.steampowered.com/app/{game.store_id}"
            elif game.platform.lower() == 'epic':
                store_url = f"https://store.epicgames.com/p/{game.store_id}"
            elif game.platform.lower() == 'gog':
                store_url = f"https://www.gog.com/game/{game.store_id}"
            
            keyboard = [
                [InlineKeyboardButton("üéÆ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", url=store_url)],
                [InlineKeyboardButton(
                    "üì• –°–∫–∞—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç",
                    url=f"https://{'store.steampowered.com/about/' if game.platform.lower() == 'steam' else 'store.epicgames.com/download' if game.platform.lower() == 'epic' else 'www.gog.com/galaxy'}"
                )]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            
    except Exception as e:
        logger.error(f"Error in free_command: {e}")
        await status_message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    application = (
        Application.builder()
        .token(TELEGRAM_TOKEN)
        .concurrent_updates(True)  # –í–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        .build()
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_GENRES: [
                CallbackQueryHandler(select_genres, pattern='^select_genres$'),
                CallbackQueryHandler(toggle_genre, pattern='^toggle_genre_'),
                CallbackQueryHandler(genres_done, pattern='^genres_done$'),
                CallbackQueryHandler(notification_settings, pattern='^notification_settings$'),
                CallbackQueryHandler(help_command, pattern='^help$'),
                CallbackQueryHandler(support_dev, pattern='^support_dev$'),
                CallbackQueryHandler(start, pattern='^back_to_main$')
            ],
            SELECTING_NOTIFICATIONS: [
                CallbackQueryHandler(toggle_notification, pattern='^toggle_'),
                CallbackQueryHandler(start, pattern='^back_to_main$')
            ]
        },
        fallbacks=[CommandHandler('start', start)],
        per_message=False
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('deals', deals_command))
    application.add_handler(CommandHandler('free', free_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 